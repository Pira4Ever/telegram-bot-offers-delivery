// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const createTabloide = `-- name: CreateTabloide :one
INSERT INTO tabloides (id, mercado) VALUES ($1, $2) RETURNING id, mercado, created_at, protected
`

type CreateTabloideParams struct {
	ID      string
	Mercado string
}

func (q *Queries) CreateTabloide(ctx context.Context, arg CreateTabloideParams) (Tabloide, error) {
	row := q.db.QueryRow(ctx, createTabloide, arg.ID, arg.Mercado)
	var i Tabloide
	err := row.Scan(
		&i.ID,
		&i.Mercado,
		&i.CreatedAt,
		&i.Protected,
	)
	return i, err
}

const deleteOld = `-- name: DeleteOld :exec
DELETE FROM tabloides WHERE protected = FALSE AND created_at < NOW() - INTERVAL '30 days'
`

func (q *Queries) DeleteOld(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteOld)
	return err
}

const gebById = `-- name: GebById :one
SELECT id, mercado, created_at, protected FROM tabloides WHERE id = $1 LIMIT 1
`

func (q *Queries) GebById(ctx context.Context, id string) (Tabloide, error) {
	row := q.db.QueryRow(ctx, gebById, id)
	var i Tabloide
	err := row.Scan(
		&i.ID,
		&i.Mercado,
		&i.CreatedAt,
		&i.Protected,
	)
	return i, err
}

const getLastWeek = `-- name: GetLastWeek :many
SELECT id, mercado, created_at, protected FROM tabloides WHERE protected = FALSE AND created_at >= NOW() - INTERVAL '7 days'
`

func (q *Queries) GetLastWeek(ctx context.Context) ([]Tabloide, error) {
	rows, err := q.db.Query(ctx, getLastWeek)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tabloide
	for rows.Next() {
		var i Tabloide
		if err := rows.Scan(
			&i.ID,
			&i.Mercado,
			&i.CreatedAt,
			&i.Protected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
